{
	"name": "dart-safe-data-class",
	"displayName": "Dart Safe Data Class Generator",
	"description": "Create dart data classes easily, with type safety and no boilerplate or code generation.",
	"publisher": "ArthurMiranda",
	"version": "0.9.0",
	"engines": {
		"vscode": "^1.65.0"
	},
	"repository": {
		"type": "git",
		"url": "https://github.com/arthurbcd/dart-data-class-tools.git"
	},
	"icon": "assets/icon.png",
	"keywords": [
		"dart safe data class generator",
		"dart data class generator",
		"dart safe data class",
		"dart data class",
		"dart safe data",
		"dart data",
		"dart safe",
		"dart",
		"data safe class generator",
		"data class generator"
	],
	"author": {
		"name": "arthurbcd"
	},
	"categories": [
		"Programming Languages",
		"Other"
	],
	"activationEvents": [
		"onLanguage:dart",
		"onCommand:dart_data_class.generate.from_props",
		"onCommand:dart_data_class.generate.from_json"
	],
	"main": "./src/extension.js",
	"contributes": {
		"commands": [
			{
				"title": "Dart Safe Data Class Generator: Generate from class properties",
				"command": "dart_data_class.generate.from_props"
			},
			{
				"title": "Dart Safe Data Class Generator: Generate from JSON",
				"command": "dart_data_class.generate.from_json"
			}
		],
		"configuration": [
			{
				"title": "Dart Safe Data Class Generator configuration",
				"properties": {
					"dart-data-class-generator.custom.argumentError": {
						"type": "string",
						"default": "throw ArgumentError.value(map[k], k, '$T ‚Üê ${map[k].runtimeType}');",
						"description": "The error that is thrown on `isA<T>()` invalid argument. Use `k` for key, `map[k]` for value and T for argument Type."
					},
					"dart-data-class-generator.custom.headerLines": {
						"type": "array",
						"items": {
							"type": "string"
						},
						"default": [
							"// Generated by Dart Safe Data Class Generator. * Change this header on extension settings *",
							"// ignore_for_file: avoid_dynamic_calls, lines_longer_than_80_chars"
						],
						"description": "Custom header lines to be added at the top of the generated file."
					},
					"dart-data-class-generator.custom.types": {
						"type": "array",
						"description": "Custom directives for specific types. Define each type with `type` for the type name, `fromMap` for the fromMap function, and `toMap` for the toMap function.",
						"default": [
							{
								"type": "DateTime",
								"fromMap": "DateTime.parse(String)",
								"toMap": "toIso8601String()"
							},
							{
								"type": "Color",
								"fromMap": "Color(int)",
								"toMap": "value"
							},
							{
								"type": "IconData",
								"fromMap": "IconData(int)",
								"toMap": "codePoint"
							},
							{
								"type": "Timestamp",
								"fromMap": "",
								"toMap": ""
							}
						],
						"items": {
							"type": "object",
							"properties": {
								"type": {
									"type": "string",
									"description": "The data type name."
								},
								"fromMap": {
									"type": "string",
									"description": "How to convert in fromMap. Ex: DateTime.parse(String)"
								},
								"toMap": {
									"type": "string",
									"description": "How to convert in toMap. Ex: toIso8601String()"
								}
							},
							"required": [
								"type",
								"fromMap",
								"toMap"
							]
						}
					},
					"dart-data-class-generator.json.key_format": {
						"type": "string",
						"enum": [
							"variable",
							"camelCase",
							"snake_case"
						],
						"default": "variable",
						"description": "Whether to use snake_case or camelCase for the json keys."
					},
					"dart-data-class-generator.quick_fixes": {
						"type": "boolean",
						"enum": [
							true,
							false
						],
						"default": true,
						"description": "If true, enables quick fixes to quickly generate data classes or specific methods only."
					},
					"dart-data-class-generator.fromMap.default_values": {
						"type": "boolean",
						"enum": [
							true,
							false
						],
						"default": false,
						"description": "If true, checks if a field is null when deserializing and provides a non-null default value."
					},
					"dart-data-class-generator.constructor.default_values": {
						"type": "boolean",
						"enum": [
							true,
							false
						],
						"default": false,
						"description": "If true, generates default values for the constructor."
					},
					"dart-data-class-generator.constructor.immutable": {
						"type": "boolean",
						"enum": [
							true,
							false
						],
						"default": false,
						"description": "If true, adds @immutable annotation on the generated class. Note: This forces all fields to be final, and all constructor to be const."
					},
					"dart-data-class-generator.constructor.required": {
						"type": "boolean",
						"enum": [
							true,
							false
						],
						"default": false,
						"description": "If true, generates the required annotation to every constructor parameter. Note: The generator wont generate default values for the constructor if enabled!"
					},
					"dart-data-class-generator.override.manual": {
						"type": "boolean",
						"enum": [
							true,
							false
						],
						"default": false,
						"description": "If true, asks, when overriding a class (running the command on an existing class), for every single function/constructor that needs to be changed whether the generator should override the function or not. This allows you to preserve custom changes you made to the function/constructor that would be otherwise overwritten by the generator."
					},
					"dart-data-class-generator.json.separate": {
						"type": "string",
						"enum": [
							"ask",
							"separate",
							"current_file"
						],
						"default": "ask",
						"description": "Whether to separate a JSON into multiple files, when the JSON contains nested objects. ask: choose manually every time, separate: always separate into multiple files, current_file: always insert all classes into the current file."
					},
					"dart-data-class-generator.constructor.enabled": {
						"type": "boolean",
						"enum": [
							true,
							false
						],
						"default": true,
						"description": "If true, generates a constructor for a data class."
					},
					"dart-data-class-generator.copyWith.enabled": {
						"type": "boolean",
						"enum": [
							true,
							false
						],
						"default": true,
						"description": "If true, generates a copyWith function for a data class."
					},
					"dart-data-class-generator.toMap.enabled": {
						"type": "boolean",
						"enum": [
							true,
							false
						],
						"default": true,
						"description": "If true, generates a toMap function for a data class."
					},
					"dart-data-class-generator.fromMap.enabled": {
						"type": "boolean",
						"enum": [
							true,
							false
						],
						"default": true,
						"description": "If true, generates a fromMap function for a data class."
					},
					"dart-data-class-generator.toJson.enabled": {
						"type": "boolean",
						"enum": [
							true,
							false
						],
						"default": true,
						"description": "If true, generates a toJson function for a data class."
					},
					"dart-data-class-generator.fromJson.enabled": {
						"type": "boolean",
						"enum": [
							true,
							false
						],
						"default": true,
						"description": "If true, generates a fromJson function for a data class."
					},
					"dart-data-class-generator.toString.enabled": {
						"type": "boolean",
						"enum": [
							true,
							false
						],
						"default": true,
						"description": "If true, generates a toString function for a data class."
					},
					"dart-data-class-generator.equality.enabled": {
						"type": "boolean",
						"enum": [
							true,
							false
						],
						"default": true,
						"description": "If true, generates an override of the == (equals) operator for a data class."
					},
					"dart-data-class-generator.hashCode.enabled": {
						"type": "boolean",
						"enum": [
							true,
							false
						],
						"default": true,
						"description": "If true, generates a hashCode function for a data class."
					},
					"dart-data-class-generator.hashCode.use_jenkins": {
						"type": "boolean",
						"enum": [
							true,
							false
						],
						"default": false,
						"description": "If true, uses the Jenkins SMI hash function instead of bitwise operator from dart:ui."
					},
					"dart-data-class-generator.useEquatable": {
						"type": "boolean",
						"enum": [
							true,
							false
						],
						"default": false,
						"description": "If true, uses equatable for value equality and hashcode."
					}
				}
			}
		]
	},
	"scripts": {
		"test": "node ./test/runTest.js"
	},
	"devDependencies": {
		"@types/glob": "^7.1.1",
		"@types/mocha": "^5.2.6",
		"@types/node": "^10.12.21",
		"@types/vscode": "^1.37.0",
		"eslint": "^5.13.0",
		"glob": "^7.1.4",
		"mocha": "^6.1.4",
		"typescript": "^3.3.1",
		"vscode-test": "^1.0.2"
	},
	"dependencies": {
		"vsce": "^2.5.1"
	}
}